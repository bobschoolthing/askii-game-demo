import sys
import random

class Main_menu:
    def __init__(self):
        self.menu = True
        self.stats_menu = False
        self.play = False
        self.player_race = None
        self.display_menu()
        self.game = None

    def display_menu(self):
        while self.menu:
            print("  Welcome to the game  ")
            print("\n1, New Game")
            print("2, Load Game (gamemode not added yet)")
            print("3, Gladiator Mode")
            print("4, Quit Game")
            self.choice = input("Enter your choice: ")
            if self.choice == "1":
                self.menu = False
                self.stats_menu = True
                self.setup_stats_menu()  # Loads into stats menu 
            elif self.choice == "2":
                self.menu = False
                self.play = True 
                self.load_game()
            elif self.choice == "3":
                self.menu = False
                self.gladiator_mode()
            elif self.choice == "4":
                sys.exit()

    def setup_stats_menu(self):
        while self.stats_menu:
            print("\n** Stats Menu **")
            races = ["orc", "elf"]
            self.player_race = input(f"What race do you want to be? ({', '.join(races)}): ").lower()
            if self.player_race not in races:
                print("Race must be one of the two shown on screen.")
            else:
                self.stats_menu = False
                self.game = NormalGame(self.player_race)  # Start the normal game
                self.game.game_loop()  # Start the game loop

    def gladiator_mode(self):
        """Launch gladiator mode."""
        print("\n** Gladiator Mode **")
        self.game = GladiatorGame()
        self.game.game_loop()

    def load_game(self):
        """Load a saved game."""
        print("\n** Load Game **")
        # Implement your load game logic here
        print("Game loaded!")
        self.game = NormalGame("orc")  # Default race for loaded game
        self.game.game_loop()


class GladiatorGame:
    def __init__(self):
        self.player_icon = "@"
        self.player_position = [4, 4]  # Starting position of the player
        self.health = 100
        self.enemy_health = 80
        self.player_race = "orc"  # Hardcoding race for gladiator mode (can be modified)
        self.map_width = 20
        self.map_height = 10
        self.score = 0  # Keeps track of the score (enemies defeated)
        self.game_over = False
        self.in_combat = False
        self.ascii_map = self.generate_random_map()  # Random map for gladiator mode
        self.enemy_positions = self.spawn_enemies()
        self.turn_counter = 0  # Tracks turns for heavy attacks
        self.player_inventory = {"potion": 0}  # Initialize potion inventory

    def generate_random_map(self):
        map_lines = []
        for y in range(self.map_height):
            line = ""
            for x in range(self.map_width):
                if random.random() < 0.1:  # Random obstacles
                    line += "x"
                else:
                    line += "."
            map_lines.append(line)
        return map_lines

    def spawn_enemies(self):
        """Spawns 4 random enemies on the map."""
        enemy_positions = []
        for _ in range(4):
            while True:
                # Random position for the enemy
                y, x = random.randint(1, self.map_height - 2), random.randint(1, self.map_width - 2)
                if self.ascii_map[y][x] == "." and [y, x] != self.player_position:
                    enemy_positions.append([y, x])
                    break
        return enemy_positions

    def player_movement(self):
        """Handle player movement in gladiator mode."""
        move = input("Move (WASD): ").lower()
        y, x = self.player_position[0], self.player_position[1]

        if move == "w" and y > 0 and self.ascii_map[y - 1][x] != "x":
            self.player_position[0] -= 1
        elif move == "s" and y < self.map_height - 1 and self.ascii_map[y + 1][x] != "x":
            self.player_position[0] += 1
        elif move == "a" and x > 0 and self.ascii_map[y][x - 1] != "x":
            self.player_position[1] -= 1
        elif move == "d" and x < self.map_width - 1 and self.ascii_map[y][x + 1] != "x":
            self.player_position[1] += 1
        else:
            print("You can't move through walls!")

        print(f"New player position: {self.player_position}")

        # Check if the player stepped on an enemy
        if self.player_position in self.enemy_positions:
            self.in_combat = True
            self.combat()

    def enemy_movement(self):
        """Handle enemy movements towards the player."""
        for i, (ey, ex) in enumerate(self.enemy_positions):
            # Calculate the difference between enemy and player positions
            y_diff = self.player_position[0] - ey
            x_diff = self.player_position[1] - ex

            # Move the enemy closer to the player (vertically or horizontally)
            if y_diff > 0 and self.ascii_map[ey + 1][ex] == ".":
                ey += 1  # Move down
            elif y_diff < 0 and self.ascii_map[ey - 1][ex] == ".":
                ey -= 1  # Move up

            if x_diff > 0 and self.ascii_map[ey][ex + 1] == ".":
                ex += 1  # Move right
            elif x_diff < 0 and self.ascii_map[ey][ex - 1] == ".":
                ex -= 1  # Move left

            # Update enemy's position
            self.enemy_positions[i] = [ey, ex]

    def combat(self):
        """Combat mechanics for gladiator mode."""
        print("You have entered combat!")
        while self.enemy_health > 0:
            action = input("Choose attack (light/heavy which takes two turns) or use potion: ").lower()
            if action == "light":
                print("You perform a light attack.")
                damage = random.randint(20, 30)
                self.enemy_health -= damage
                print(f"You dealt {damage} damage to the enemy.")
            elif action == "heavy":
                if self.turn_counter == 0:
                    print("You start charging your heavy attack.")
                    self.turn_counter = 1  # First turn of charging
                elif self.turn_counter == 1:
                    print("You unleash your heavy attack!")
                    damage = random.randint(30, 50)
                    self.enemy_health -= damage
                    print(f"You dealt {damage} damage to the enemy.")
                    self.turn_counter = 0  # Reset after completing the attack
            elif action == "potion":
                self.use_potion()
            else:
                print("Invalid action. Choose 'light', 'heavy', or 'potion'.")
                continue

            if self.enemy_health <= 0:
                print("Enemy defeated! You won the battle!")
                self.score += 1  # Increment score on enemy defeat
                self.enemy_health = 80  # Reset enemy health
                self.remove_enemy()  # Remove the enemy from the map
                # Random chance to drop a potion
                if random.random() < 0.3:  # 30% chance to drop a potion
                    self.player_inventory["potion"] += 1
                    print("You found a health potion!")
                break

            # Enemy attacks
            enemy_damage = random.randint(10, 20)
            self.health -= enemy_damage
            print(f"The enemy attacks you and deals {enemy_damage} damage.\nYour health: {self.health}")

            if self.health <= 0:
                print("You have been defeated! Game Over!")
                self.game_over = True
                break

    def use_potion(self):
        if self.player_inventory["potion"] > 0:
            self.health += 20
            if self.health > 100:
                self.health = 100
            self.player_inventory["potion"] -= 1
            print(f"You used a health potion and restored 20 health. Current health: {self.health}")
        else:
            print("You don't have any health potions!")

    def remove_enemy(self):
        """Remove the defeated enemy from the map and replace it with a dot."""
        y, x = self.player_position
        if [y, x] in self.enemy_positions:
            self.enemy_positions.remove([y, x])  # Remove the enemy from the list
            # Replace the enemy position with a dot
            map_lines = self.ascii_map[:]
            map_lines[y] = map_lines[y][:x] + "." + map_lines[y][x + 1:]
            self.ascii_map = map_lines

    def print_map(self):
        """Print the map and show player's position."""
        map_lines = self.ascii_map[:]
        y, x = self.player_position

        # First, clear the spot where the player is on the map
        map_lines[y] = map_lines[y][:x] + "@" + map_lines[y][x + 1:]

        # Mark enemies on the map
        for ey, ex in self.enemy_positions:
            if [ey, ex] != self.player_position:  # Don't overwrite the player's position
                map_lines[ey] = map_lines[ey][:ex] + "E" + map_lines[ey][ex + 1:]

        print("\n".join(map_lines))
        print(f"Enemies defeated: {self.score}")
        print(f"Health potions: {self.player_inventory['potion']}")

    def check_for_enemy_defeat(self):
        """Check if all enemies are defeated, and generate a new map."""
        if (self.enemy_positions) == 0:
            print("All enemies defeated! Generating a new arena...")
            self.ascii_map = self.generate_random_map()
            self.enemy_positions = self.spawn_enemies()
    def check_win_condition(self):
       if self.score >= 20:
           print("\n************************************")
           print("You have defeated 20 enemies! You win!")
           print("************************************\n")
           self.game_over = True
    def game_loop(self):
        """Game loop for gladiator mode."""
        while not self.game_over:
            self.print_map()
            self.enemy_movement()  # Move enemies towards the player
            self.check_for_enemy_defeat()  # Check if all enemies are defeated
            self.player_movement()  
            if self.in_combat:
                self.combat()
                self.in_combat = False
            self.check_win_condition()
class NormalGame:
    def __init__(self, player_race):
        self.player_icon = "@"
        self.player_position = [3, 46]  # Starting position of the player
        self.health = 100
        self.map_width = 50
        self.map_height = 19
        self.player_race = player_race
        self.enemy_positions = [(12, 31)]  # Enemy positions
        self.enemy_health = 80
        self.player_inventory = {"potion": 1, "key": 0}
        self.ascii_map = [  
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            "xxxxxxxxxxxxxxxxxxxx............................x",
            "xxxxxxxxxxxxxxx................................x",
            "xxxxxxxxxxxx....................................",
            "x...............................................x",
            "x.......................................,,.......x",
            "x...............................................x",
            "x..................,............................x",
            "x...............................................x",
            "x...................................xxxxxxxxxx.x",
            "x..........,.................xxxxxxxxxxxxxxxxxxxx",
            "O..................................xxxxxxxxxx.x",
            "O.,......................E.........xxxxxxxxxx.x",
            "O..................................xxxxxxxxxx.x",
            "x.............................xxxxxxxxxxxxxxxxxx",
            "x..............,..............xxxxxxxxxxxxxxxxxx",
            "x...............................................x",
            "x...............................................x",
            "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        ]
        self.game_over = False  # Flag to check if the game is over
        self.turn_counter = 0  # Tracks turns for heavy attacks
        self.in_combat = False  # Flag to check if in combat
        self.health_potion_position = (10, 40)  # Position of the health potion on the map

    def player_movement(self):
        """Handle player movement."""
        if self.game_over or self.in_combat:  # Can't move after objective is met or during combat
            return
        
        move = input("Move (WASD): ").lower()
        y, x = self.player_position

        if move == "w" and y > 0 and self.ascii_map[y - 1][x] != "x":
            self.player_position[0] -= 1
        elif move == "s" and y < self.map_height - 1 and self.ascii_map[y + 1][x] != "x":
            self.player_position[0] += 1
        elif move == "a" and x > 0 and self.ascii_map[y][x - 1] != "x":
            self.player_position[1] -= 1
        elif move == "d" and x < self.map_width - 1 and self.ascii_map[y][x + 1] != "x":
            self.player_position[1] += 1
        else:
            print("You can't move through walls!")

        print(f"New player position: {self.player_position}")

        # Update the map to reflect the player's new position
        if self.ascii_map[y][x] == "E":
            # Replace the old enemy position with a dot
            map_lines = self.ascii_map[:]
            map_lines[y] = map_lines[y][:x] + "." + map_lines[y][x + 1:]
            self.ascii_map = map_lines
        

    def death(self):
        """Handle player death."""
        print("You died: game over!!")
        sys.exit()

    def trap(self):
        """Handle trap mechanics."""
        y, x = self.player_position
        trap_character = ","
        if self.ascii_map[y][x] == trap_character: 
            self.health -= 10
            print(f"You stepped on a trap. Health: {self.health}")
            if self.health <= 0:
                self.death()

    def objective(self):
        """Check if the player completes the objective."""
        y, x = self.player_position
        objective_symbol = "O"
        if self.ascii_map[y][x] == objective_symbol:
            if self.player_inventory.get("key", 0) == 1:
                self.objectivedone()
                self.game_over = True  # End the game
            else:
                print("You see a locked door. You need a key to open it.")
            
    def objectivedone(self):
        """Handle completion of the objective."""
        print("\n************************************")
        print("You completed the demo!")
        print("************************************\n")
        sys.exit()  

    def enemy(self):
        """Handle enemy encounters."""
        y, x = self.player_position
        enemy_symbol = "E"
        if self.ascii_map[y][x] == enemy_symbol:
            print("You encountered an enemy!")
            self.in_combat = True  # Set the combat flag
            self.dialog()
            
    def dialog(self):
        """Handle dialog with enemies."""
        print("Who are you? I'll crush you!! - enemy")
        
        while True:  
            if self.player_race == "elf": # elf dialog
                elfdi = input("\n1: Look, I'm just trying to get out of here. Give me directions, and I'll be out of your way. \n2: Bring it on!\nEnter here: ")
    
                if elfdi == "1":  
                    print("Ok man, just go left. Here you go.")
                    self.in_combat = False
                    self.items()
                    break  # Exit the loop after the directions are given
                elif elfdi == "2":  
                    print("Come at me!")
                    self.combat() 
                    break  
                else:
                    print("Invalid choice. Try again.")  # Error message for invalid input
            else:  # For Orc dialog
                orcdi = input("\n1: You're messing with the wrong orc! (50% chance to scare)\n2: Bring it on!\nEnter here: ")
    
                if orcdi == "1":
                    response = random.choice(["Ok, just go left. Here you go.", "I think I do!!"])
                    print(response)
                    if response == "Ok, just go left. Here you go.":
                        self.in_combat = False
                        self.items()
                        break  
                    else:
                        self.combat() 
                        break  
                elif orcdi == "2":
                    print("Come at me!")
                    self.combat()  
                    break  
                    
    def combat(self):
      
        print("You have entered combat!")
        while self.enemy_health > 0:
            action = input("Choose attack (light/heavy which takes two turns): ").lower()
            if action == "light":
                print("You perform a light attack.")
                if self.player_race == "orc":
                    damage = random.randint(20, 30)
                else:
                    damage = random.randint(10, 20)
                self.enemy_health -= damage
                print(f"You dealt {damage} damage to the enemy.")
            elif action == "heavy":
                if self.turn_counter == 0:
                    print("You start charging your heavy attack.")
                    self.turn_counter = 1  # first turn of the heavy which takes two turns
                elif self.turn_counter == 1:
                    print("You unleash your heavy attack!")
                    if self.player_race == "orc":
                        damage = random.randint(30, 45)
                    else:
                        damage = random.randint(25, 35)
                    self.enemy_health -= damage
                    print(f"You dealt {damage} damage to the enemy.")
                    self.turn_counter = 0  # Reset after completing the heavy attack
            elif action == "potion":
                self.use_potion()
            else:
                print("Invalid action! Please choose 'light', 'heavy', or 'potion'.")
                continue  

            if self.enemy_health <= 0:
                self.items()
                print("Enemy defeated! You won the battle!")
                self.in_combat = False  # Set combat flag to False after battle ends
                break

            # Enemy attack code
            enemy_damage = random.randint(10, 20)  # Enemy deals less damage than the player
            self.health -= enemy_damage
            print(f"The enemy attacks you and deals {enemy_damage} damage.\nYour health: {self.health}/Enemy health: {self.enemy_health}")
            if self.health <= 0:
                self.death()

    def items(self):
        """Handle item collection."""
        if "key" not in self.player_inventory or self.player_inventory["key"] == 0:
            self.player_inventory["key"] = 1
            print("You obtained a key!")

    def print_map(self):
        """Print the map and show player's position."""
        map_lines = self.ascii_map[:]
        y, x = self.player_position
        map_lines[y] = map_lines[y][:x] + self.player_icon + map_lines[y][x + 1:]  # Updates player position on the map
    
        # Print the map and fight-related information if in combat
        print("\n".join(map_lines))
        if self.in_combat:
            print(f"Enemy Health: {self.enemy_health}")

    def game_loop(self):
        """Main game loop for NormalGame."""
        while not self.game_over:
            self.print_map()  # Display the map with the player's current position
            self.trap()  # Check if player steps on a trap
            self.objective()  # Check if the player completes an objective
            
            if not self.in_combat:
                self.enemy()  # Check if the player has encountered an enemy
        
            # If we're in combat, handle the combat code
            if self.in_combat:
                self.combat()
                if not self.in_combat: 
                    continue 
              
            if not self.in_combat:
                self.player_movement()  # Allow player movement


# Initialize and start the game
if __name__ == "__main__":
    game = Main_menu()
